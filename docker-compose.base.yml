x-network-config: &network-config
  networks:
    - internal_network

services:
  app:
    <<: *network-config
    build:
      context: .
      args:
        DOCKER_BUILDKIT: 1
    expose:
      - '3000'
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - system_status:/app/docker/system_status
    environment:
      PORT: '3000'
      SYSTEM_STATUS_DIR: '/app/docker/system_status'

      # DB
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}

      # AUTH
      AUTH_TOKEN_SECRET: ${AUTH_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}

      # EMAIL
      VITE_EMAIL_ADDRESS_SUPPORT: ${VITE_EMAIL_ADDRESS_SUPPORT:-support@${WEBSITE_DOMAIN:-localhost}}
    healthcheck:
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  db:
    image: postgres:latest
    <<: *network-config
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  nginx:
    deploy:
      resources:
        limits:
          memory: ${NGINX_MEMORY_LIMIT:-512M}
          cpus: ${NGINX_CPU_LIMIT:-0.25}
    environment:
      AUTH_RATE: '${AUTH_RATE:-10r/m}'
      VERIFY_RATE: '${VERIFY_RATE:-5r/m}'
      ALLOWED_ORIGINS: '${API_PROTOCOL:-https}://${WEBSITE_DOMAIN}'
      WEBSITE_DOMAIN: '${WEBSITE_DOMAIN:-localhost}'
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'nginx -t || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  internal_network:
    driver: bridge

volumes:
  postgres_data:
  system_status:
