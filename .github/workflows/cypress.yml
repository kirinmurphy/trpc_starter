name: Cypress Tests

on:
  push:
    branches: ['main']
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cypress-tests:
    runs-on: ubuntu-latest

    env:
      DB_NAME: ci_db
      TEST_DB_NAME: ci_db_cypress
      DB_USER: postgres
      DB_PASSWORD: password1
      AUTH_TOKEN_SECRET: test-secret
      REFRESH_TOKEN_SECRET: test-refresh-secret
      VITE_PORT: 5173

    steps:
      - uses: actions/checkout@v4

      - name: Install make
        run: sudo apt-get install -y make

      - name: Prepare artifact directories
        run: |
          mkdir -p cypress/screenshots cypress/videos cypress/downloads
          chmod -R 777 cypress/screenshots cypress/videos cypress/downloads

      - name: Check for artifacts Before Tests
        run: |
          echo "Checking for artifacts..."
          ls -la cypress || true

      - name: Build test containers
        run: make build-tests

      # - name: Prepare for test debugging
      #   run: |
      #     # Create a script to monitor Docker during test execution
      #     cat > monitor.sh << 'EOF'
      #     #!/bin/bash
      #     echo "Starting Docker monitoring at $(date)"
      #     for i in {1..30}; do
      #       echo "---- Docker status check $i at $(date) ----"
      #       docker ps
      #       echo ""
      #       sleep 10
      #     done
      #     EOF
      #     chmod +x monitor.sh

      # - name: Start monitoring
      #   run: ./monitor.sh > docker_monitoring.log 2>&1 &

      - name: Run tests
        run: make run-tests FILE=auth_spec
        id: run_tests
        continue-on-error: false

      # - name: Collect debugging information
      #   if: always()
      #   run: |
      #     echo "Docker monitoring log:"
      #     cat docker_monitoring.log

      #     # Try to find Mailhog logs if it exists
      #     MAILHOG_CONTAINER=$(docker ps -a | grep -i mail | awk '{print $1}' || echo "")
      #     if [ -n "$MAILHOG_CONTAINER" ]; then
      #       echo "Found Mailhog container: $MAILHOG_CONTAINER"
      #       echo "Mailhog logs:"
      #       docker logs $MAILHOG_CONTAINER
      #     else
      #       echo "No Mailhog container found at end of test"
      #     fi

      #     # Check Docker Compose project if it exists
      #     if [ -f "docker-compose.yml" ]; then
      #       echo "Docker Compose configuration:"
      #       cat docker-compose.yml
      #       echo "Docker Compose status:"
      #       docker-compose ps || echo "docker-compose command failed"
      #     fi

      - name: sCheck for artifacts
        if: failure()
        run: |
          echo "Checking for artifacts..."
          ls -la cypress/screenshots || true
          ls -la cypress/videos || true

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results
          path: |
            cypress/videos
            cypress/screenshots
          if-no-files-found: warn

      - name: Cleanup
        if: always()
        run: make clean-tests
