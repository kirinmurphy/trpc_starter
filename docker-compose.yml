services: 
  app:
    build: 
      context: .
      args:
        COMPOSE_DOCKER_CLI_BUILD: 1
        DOCKER_BUILDKIT: 1
    ports:
      - "3000:3000"
      - "5173:5173"
    volumes: 
      - .:/app
      - /app/node_modules
    logging: 
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: '3'
    environment:
      CLIENT_URL: ${CLIENT_URL}
      VITE_HOST: 0.0.0.0
      HOST: 0.0.0.0
      NODE_ENV: development
      VITE_API_URL: http://localhost:3000
      # DB
      DB_USER: ${DB_USER}
      DB_HOST: db 
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      TEST_DB_NAME: ${TEST_DB_NAME}
      # AUTH
      AUTH_TOKEN_SECRET: ${AUTH_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      # OUTPUT
      DEBUG: "app:*"
    depends_on: 
      db:
        condition: service_healthy    

    healthcheck:
      test: [
        "CMD-SHELL", 
        "curl -f http://localhost:5173 > /dev/null 2>&1 && curl -f 'http://localhost:3000/ping?batch=1&input=%7B%7D' > /dev/null 2>&1"
      ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

    command: ./docker/init-app.sh

  db: 
    image: postgres:latest
    ports: 
      - "5433:5432"
    environment: 
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - TEST_DB_NAME=${TEST_DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes: 
  postgres_data: 
