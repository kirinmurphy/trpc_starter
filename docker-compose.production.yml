x-env-vars: &app_env
  NODE_ENV: production
  INTERNAL_CLIENT_URL: 'https://${WEBSITE_DOMAIN}'
  VITE_API_URL: 'https://${WEBSITE_DOMAIN}'
  CUSTOM_EMAIL_PROVIDER: ${CUSTOM_EMAIL_PROVIDER}
  EMAIL_SERVICE_HOST: ${EMAIL_SERVICE_HOST}
  EMAIL_SERVICE_USER: ${EMAIL_SERVICE_USER}
  EMAIL_API_KEY: ${EMAIL_API_KEY}
  EMAIL_SERVICE_SYSTEM_EMAIL_ADDRESS: ${EMAIL_SERVICE_SYSTEM_EMAIL_ADDRESS}
  EMAIL_SERVICE_SYSTEM_EMAIL_SENDER: ${EMAIL_SERVICE_SYSTEM_EMAIL_SENDER}
  EMAIL_SERVICE_PORT: ${EMAIL_SERVICE_PORT}
  EMAIL_SERVICE_SECURE: ${EMAIL_SERVICE_SECURE}
  SUPER_ADMIN_EMAIL: ${SUPER_ADMIN_EMAIL}

services:
  app:
    build:
      target: final_production
    command: bun run start --no-daemon
    expose:
      - '3000'
    environment:
      <<: *app_env
    healthcheck:
      test:
        [
          'CMD',
          '/bin/sh',
          './docker/app-health-check.sh',
          'http://localhost:3000/ping',
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: ${DOCKER_APP_MEMORY_LIMIT:-1G}
          cpus: ${DOCKER_APP_CPU_LIMIT:-0.5}
    networks:
      - internal_network
    depends_on:
      app_initialization:
        condition: service_completed_successfully

  db:
    deploy:
      resources:
        limits:
          memory: ${DOCKER_DB_MEMORY_LIMIT:-1G}
          cpus: ${DOCKER_DB_CPU_LIMIT:-0.5}
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
    networks:
      - internal_network

  nginx:
    build:
      target: production_nginx
      args:
        VITE_API_URL: 'https://${WEBSITE_DOMAIN}'
    environment:
      NODE_ENV: production
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=web'
      - 'traefik.http.services.nginx.loadbalancer.server.port=80'

      - 'traefik.http.routers.app.rule=Host(`${WEBSITE_DOMAIN}`)'
      - 'traefik.http.routers.app.entrypoints=websecure'
      - 'traefik.http.routers.app.tls=true'
      - 'traefik.http.routers.app.tls.certresolver=myresolver'

    depends_on:
      app:
        condition: service_healthy
    networks:
      - web
      - internal_network

  app_initialization:
    build:
      context: .
      dockerfile: Dockerfile
      target: app_initialization_stage
    depends_on:
      db:
        condition: service_healthy
    command: >
      /bin/bash -c "echo 'Waiting for DB to be ready...'; until pg_isready -h db -p 5432 -U postgres; do sleep 1; done; echo 'DB is ready. Running app initialization...'; /app/docker/init-prod.sh"
    restart: 'no'
    networks:
      - internal_network
    environment:
      <<: *app_env
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      AUTH_TOKEN_SECRET: ${AUTH_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      WEBSITE_DOMAIN: ${WEBSITE_DOMAIN}
